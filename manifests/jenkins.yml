---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-cluster-deployer-role
rules:
  # Allow management of Deployments and Services
  - apiGroups: ["apps", ""]
    resources: ["deployments", "services"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  # Allow viewing Pods for debugging
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "logs"]
  # Allow management of RBAC resources
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-cluster-deployer-binding
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
roleRef:
  kind: ClusterRole
  name: jenkins-cluster-deployer-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-deployment
  labels:
    app: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 999 # The GID of the 'docker' group on the host
      containers:
      - name: jenkins
        image: kaytac/jenkins-custom:1.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        - containerPort: 50000
        volumeMounts:
        - name: jenkins-volume
          mountPath: /var/jenkins_home
        - name: docker-socket
          mountPath: /var/run/docker.sock
      volumes:
      - name: jenkins-volume
        emptyDir: {}
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30000
  selector:
    app: jenkins